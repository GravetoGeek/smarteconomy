{
    "name": "smarteconomy-backend",
    "version": "1.0.0",
    "description": "Sistema de Gest√£o Financeira Pessoal com Arquitetura Hexagonal - Backend API em NestJS com GraphQL",
    "author": "GravetoGeek <contato@gravetogeek.com>",
    "private": true,
    "license": "MIT",
    "scripts": {
        "build": "nest build",
        "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
        "start": "nest start",
        "start:dev": "nest start --watch",
        "start:debug": "nest start --debug --watch",
        "start:prod": "node dist/main",
        "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
        "test": "npx dotenv-cli -e .env.test -- jest --runInBand --config ./jest.unit.config.cjs",
        "test:watch": "npx dotenv-cli -e .env.test -- jest --runInBand --watch --config ./jest.unit.config.cjs",
        "test:cov": "npx dotenv-cli -e .env.test -- jest --runInBand --coverage --config ./jest.unit.config.cjs",
        "test:debug": "npx dotenv-cli -e .env.test -- node --inspect-brk node_modules/.bin/jest --runInBand --config ./jest.unit.config.cjs",
        "test:e2e": "npx dotenv-cli -e .env.test -- node -r ts-node/register -r tsconfig-paths/register node_modules/.bin/jest --runInBand --config ./jest.e2e.config.ts",
        "test:int": "npx dotenv-cli -e .env.test -- node -r ts-node/register -r tsconfig-paths/register node_modules/.bin/jest --runInBand --config ./jest.int.config.ts",
        "prisma:migrateTest": "npx dotenv-cli -e .env.test -- npx migrate deploy",
        "db:seed": "ts-node prisma/seed.ts",
        "clearBranchsLinux": "git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done",
        "clearBranchsWindows": "git fetch -p && for /F \"tokens=1*\" %i in ('git branch -vv | find /v \"+\" | find /v \"master\" | find /v \"develop\" | find /v \"*\" | find /v \"feature\"') do git branch -D %i",
        "clearCacheLinux": "npm cache clean --force && sudo rm -rf node_modules && sudo rm package-lock.json",
        "clearCacheWindows": "npm cache clean --force && rmdir /s /q node_modules && del /q package-lock.json",
        "prepare": "husky"
    },
    "dependencies": {
        "@apollo/server": "^4.11.0",
        "@nestjs/apollo": "^12.2.0",
        "@nestjs/common": "^10.0.0",
        "@nestjs/config": "^3.2.3",
        "@nestjs/core": "^10.0.0",
        "@nestjs/graphql": "^12.2.0",
        "@nestjs/mapped-types": "^2.0.5",
        "@nestjs/platform-express": "^10.0.0",
        "@prisma/client": "^5.19.1",
        "@types/bcrypt": "^6.0.0",
        "@types/bcryptjs": "^2.4.6",
        "bcrypt": "^6.0.0",
        "bcryptjs": "^3.0.2",
        "class-transformer": "^0.5.1",
        "class-validator": "^0.14.1",
        "graphql": "^16.11.0",
        "reflect-metadata": "^0.2.0",
        "rxjs": "^7.8.1",
        "winston": "^3.17.0"
    },
    "devDependencies": {
        "@eslint/js": "^9.10.0",
        "@faker-js/faker": "^9.0.1",
        "@nestjs/cli": "^11.0.10",
        "@nestjs/schematics": "^10.0.0",
        "@nestjs/testing": "^11.1.6",
        "@types/express": "^4.17.17",
        "@types/jest": "^29.5.2",
        "@types/node": "^20.3.1",
        "@types/supertest": "^6.0.0",
        "@typescript-eslint/eslint-plugin": "^8.0.0",
        "@typescript-eslint/parser": "^8.0.0",
        "eslint": "^8.57.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-plugin-prettier": "^5.0.0",
        "globals": "^15.9.0",
        "husky": "^9.1.7",
        "jest": "^29.5.0",
        "prettier": "^3.0.0",
        "prisma": "^5.19.1",
        "source-map-support": "^0.5.21",
        "supertest": "^7.0.0",
        "ts-jest": "^29.1.0",
        "ts-loader": "^9.4.3",
        "ts-node": "^10.9.1",
        "tsconfig-paths": "^4.2.0",
        "typescript": "^5.1.3",
        "typescript-eslint": "^8.4.0"
    },
    "prisma": {
        "schema": "./src/database/prisma/schema.prisma"
    },
    "husky": {
        "hooks": {
            "applypatch-msg": "echo \"[Husky] applypatch-msg\"",
            "pre-applypatch": "echo \"[Husky] pre-applypatch\"",
            "post-applypatch": "echo \"[Husky] post-applypatch\"",
            "pre-commit": "echo \"[Husky] pre-commit\""
        }
    }
}
