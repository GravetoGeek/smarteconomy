/**
 * üö® Transaction Domain Exceptions
 *
 * Define exce√ß√µes espec√≠ficas do dom√≠nio de transa√ß√µes
 * para tratamento de erros de neg√≥cio.
 */

export class TransactionDomainException extends Error {
    constructor(message: string) {
        super(message)
        this.name='TransactionDomainException'
    }
}

export class InvalidTransactionAmountException extends TransactionDomainException {
    constructor(amount: number) {
        super(`Valor da transa√ß√£o inv√°lido: ${amount}. Deve ser positivo e at√© R$ 999.999,99`)
        this.name='InvalidTransactionAmountException'
    }
}

export class InvalidTransactionDescriptionException extends TransactionDomainException {
    constructor(description: string) {
        super(`Descri√ß√£o da transa√ß√£o inv√°lida: "${description}". Deve ter entre 2 e 255 caracteres`)
        this.name='InvalidTransactionDescriptionException'
    }
}

export class InvalidTransferException extends TransactionDomainException {
    constructor(reason: string) {
        super(`Transfer√™ncia inv√°lida: ${reason}`)
        this.name='InvalidTransferException'
    }
}

export class TransactionStatusException extends TransactionDomainException {
    constructor(currentStatus: string,attemptedAction: string) {
        super(`N√£o √© poss√≠vel ${attemptedAction} uma transa√ß√£o com status ${currentStatus}`)
        this.name='TransactionStatusException'
    }
}

export class MissingTransactionCategoryException extends TransactionDomainException {
    constructor() {
        super('Toda transa√ß√£o deve ter uma categoria')
        this.name='MissingTransactionCategoryException'
    }
}

export class MissingDestinationAccountException extends TransactionDomainException {
    constructor() {
        super('Conta de destino √© obrigat√≥ria para transfer√™ncias')
        this.name='MissingDestinationAccountException'
    }
}

export class MissingDestinationBalanceException extends TransactionDomainException {
    constructor() {
        super('Saldo da conta de destino √© obrigat√≥rio para transfer√™ncias')
        this.name='MissingDestinationBalanceException'
    }
}

export class DuplicateTransactionException extends TransactionDomainException {
    constructor() {
        super('Transa√ß√£o duplicada detectada')
        this.name='DuplicateTransactionException'
    }
}

export class TransactionNotFoundException extends TransactionDomainException {
    constructor(id: string) {
        super(`Transa√ß√£o n√£o encontrada: ${id}`)
        this.name='TransactionNotFoundException'
    }
}

export class InsufficientBalanceException extends TransactionDomainException {
    constructor(currentBalance: number,requestedAmount: number) {
        super(`Saldo insuficiente. Saldo atual: R$ ${currentBalance.toFixed(2)}, Valor solicitado: R$ ${requestedAmount.toFixed(2)}`)
        this.name='InsufficientBalanceException'
    }
}

export class TransactionLimitExceededException extends TransactionDomainException {
    constructor(limit: number,attemptedAmount: number) {
        super(`Limite de transa√ß√£o excedido. Limite: R$ ${limit.toFixed(2)}, Tentativa: R$ ${attemptedAmount.toFixed(2)}`)
        this.name='TransactionLimitExceededException'
    }
}
