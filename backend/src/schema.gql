# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  id: ID!
  name: String!
  type: String!
  balance: Float!
  userId: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthUser {
  id: String!
  email: String!
  role: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  expiresIn: Float!
  tokenType: String!
  user: AuthUser!
}

type LogoutResponse {
  success: Boolean!
  message: String!
}

type ValidateTokenResponse {
  valid: Boolean!
  user: AuthUser
}

type PasswordResetResponse {
  success: Boolean!
  message: String!
}

type Category {
  id: String!
  category: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Transaction {
  id: ID!
  description: String!
  amount: Float!
  type: TransactionType!
  status: TransactionStatus!
  accountId: String!
  categoryId: String!
  destinationAccountId: String
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Tipo da transação"""
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

"""Status da transação"""
enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

type TransactionSearchResult {
  transactions: [Transaction!]!
  total: Float!
  page: Float!
  limit: Float!
  totalPages: Float!
}

type TransactionSummary {
  totalIncome: Float!
  totalExpense: Float!
  totalTransfer: Float!
  balance: Float!
  period: String!
}

type CreateTransactionResponse {
  transaction: Transaction!
  warnings: [String!]!
}

type GenderModel {
  id: ID!
  gender: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProfessionModel {
  id: ID!
  profession: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DeleteUserResponse {
  success: Boolean!
  message: String!
}

type User {
  id: ID!
  email: String!
  name: String!
  lastname: String!
  birthdate: DateTime!
  role: String!
  genderId: String!
  professionId: String!
  profileId: String
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SearchResult {
  items: [User!]!
  total: Int!
  currentPage: Int!
  limit: Int!
  totalPages: Int!
  lastPage: Int!
}

type UpdateUserResponse {
  success: Boolean!
  user: User
  message: String!
}

type Query {
  hello: String!
  users: [User!]!
  userById(id: String!): User
  userByEmail(email: String!): User
  searchUsers(input: SearchUsersInput!): SearchResult!
  accountsByUser(userId: String!): [Account!]!
  accountById(id: String!): Account
  genders: [GenderModel!]!
  gender(id: String!): GenderModel!
  professions: [ProfessionModel!]!
  profession(id: String!): ProfessionModel!
  searchTransactions(userId: String!, input: SearchTransactionsInput): TransactionSearchResult!
  transactionSummary(accountId: String!, dateFrom: DateTime!, dateTo: DateTime!): TransactionSummary!
  validateToken(input: ValidateTokenInput!): ValidateTokenResponse!
  categories: [Category!]!
  categoriesByType(type: String!): [Category!]!
  category(id: String!): Category!
  dashboardMetrics(userId: String!, period: String, dateFrom: String, dateTo: String, accountIds: [String!], categoryIds: [String!]): String!
  financialTrends(userId: String!, months: Float): String!
  accountsSummary(userId: String!): String!
  financialAlerts(userId: String!): String!
  categoryAnalysis(userId: String!, period: String): String!
  periodComparison(userId: String!, period: String!): String!
}

input SearchUsersInput {
  page: Int!
  limit: Int!
  filter: String
  sort: String
  sortDirection: String
}

input SearchTransactionsInput {
  filters: TransactionFiltersInput
  page: Float
  limit: Float
  sortBy: String
  sortOrder: String
}

input TransactionFiltersInput {
  accountId: String
  categoryId: String
  type: TransactionType
  status: TransactionStatus
  dateFrom: DateTime
  dateTo: DateTime
  minAmount: Float
  maxAmount: Float
  searchTerm: String
}

input ValidateTokenInput {
  accessToken: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: String!, input: UpdateUserInput!): UpdateUserResponse!
  deleteUser(id: String!): DeleteUserResponse!
  createAccount(input: CreateAccountInput!): Account!
  createGender(input: CreateGenderInput!): GenderModel!
  createProfession(input: CreateProfessionInput!): ProfessionModel!
  createTransaction(input: CreateTransactionInput!): CreateTransactionResponse!
  updateTransaction(id: String!, input: UpdateTransactionInput!): Transaction!
  reverseTransaction(transactionId: String!, reason: String!, requestedBy: String!): Transaction!
  login(input: LoginInput!): AuthResponse!
  signup(input: SignupInput!): AuthResponse!
  refreshToken(input: RefreshTokenInput!): AuthResponse!
  logout(input: LogoutInput!): LogoutResponse!
  requestPasswordReset(input: RequestPasswordResetInput!): PasswordResetResponse!
  resetPassword(input: ResetPasswordInput!): Boolean!
  createCategory(input: CreateCategoryInput!): Category!
}

input CreateUserInput {
  email: String!
  name: String!
  lastname: String!
  birthdate: String!
  role: String!
  genderId: String!
  professionId: String!
  profileId: String
  password: String!
}

input UpdateUserInput {
  email: String
  name: String!
  lastname: String!
  birthdate: String
  role: String
  genderId: String!
  professionId: String!
  profileId: String
  password: String!
}

input CreateAccountInput {
  name: String!
  type: String!
  balance: Float
  userId: String!
}

input CreateGenderInput {
  gender: String!
}

input CreateProfessionInput {
  profession: String!
}

input CreateTransactionInput {
  description: String!
  amount: Float!
  type: TransactionType!
  accountId: String!
  categoryId: String
  destinationAccountId: String
  date: DateTime
}

input UpdateTransactionInput {
  description: String
  status: TransactionStatus
}

input LoginInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
  name: String!
  lastname: String!
  birthdate: String!
  genderId: String!
  professionId: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input LogoutInput {
  accessToken: String!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

input CreateCategoryInput {
  category: String!
}