// üóÉÔ∏è SmartEconomy Database Schema
// Sistema de Gest√£o Financeira Pessoal
// Arquitetura: Domain-Driven Design com Prisma ORM
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// üë§ Entidade principal do sistema representando um usu√°rio
/// Cont√©m informa√ß√µes pessoais, credenciais e relacionamentos
model User {
    /// Identificador √∫nico do usu√°rio (UUID)
    id           String        @id @default(uuid())
    /// Email √∫nico para login e comunica√ß√£o
    email        String        @unique @db.VarChar(255)
    /// Primeiro nome do usu√°rio (m√°x. 30 caracteres)
    name         String        @db.VarChar(30)
    /// Sobrenome do usu√°rio (m√°x. 50 caracteres)
    lastname     String        @db.VarChar(50)
    /// Data de nascimento para c√°lculo de idade e valida√ß√µes
    birthdate    DateTime      @db.Date
    /// Papel do usu√°rio no sistema (USER, ADMIN)
    role         String        @default("USER")
    /// Posts criados pelo usu√°rio (relacionamento 1:N)
    posts        Post[]
    /// Contas financeiras do usu√°rio (relacionamento 1:N)
    accounts     Account[]
    /// G√™nero do usu√°rio (relacionamento N:1)
    gender       Gender        @relation(fields: [genderId], references: [id])
    genderId     String
    /// Senha hash com bcrypt (salt rounds = 12)
    password     String        @db.VarChar(255)
    /// Timestamp de cria√ß√£o do registro
    createdAt    DateTime      @default(now())
    /// Timestamp da √∫ltima atualiza√ß√£o
    updatedAt    DateTime      @updatedAt
    /// Perfil detalhado do usu√°rio (relacionamento 1:1)
    profile      Profile?      @relation
    profileId    String?       @db.VarChar(50)
    /// Profiss√£o do usu√°rio (relacionamento N:1)
    profession   Profession?   @relation(fields: [professionId], references: [id])
    professionId String
    /// Status da conta (ACTIVE, INACTIVE, SUSPENDED)
    status       AccountStatus @default(ACTIVE)
}

/// üìù Posts/artigos criados pelos usu√°rios
/// Sistema de blog ou conte√∫do educacional financeiro
model Post {
    /// Identificador √∫nico do post
    id           String         @id @default(uuid())
    /// T√≠tulo do post
    title        String
    /// Slug √∫nico para URLs amig√°veis
    slug         String         @unique
    /// Conte√∫do completo do post (markdown/html)
    content      String
    /// Status de publica√ß√£o (rascunho/publicado)
    published    Boolean        @default(false)
    /// Autor do post (relacionamento N:1)
    author       User           @relation(fields: [authorId], references: [id])
    authorId     String
    /// Categorias do post (relacionamento N:N)
    postCategory PostCategory[] @relation
    /// Data de cria√ß√£o
    createdAt    DateTime       @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt    DateTime       @updatedAt
}

/// üìÇ Categorias para organiza√ß√£o de posts
/// Permite classifica√ß√£o de conte√∫do educacional
model PostCategory {
    /// Identificador √∫nico da categoria
    id        String   @id @default(uuid())
    /// Nome da categoria
    category  String
    /// Posts associados a esta categoria
    posts     Post[]
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// üë§ Perfil detalhado do usu√°rio
/// Informa√ß√µes adicionais e personaliz√°veis
model Profile {
    /// Identificador √∫nico do perfil
    id        String   @id @default(uuid())
    /// Biografia ou descri√ß√£o pessoal
    bio       String   @default("")
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
    /// Usu√°rio propriet√°rio do perfil (relacionamento 1:1)
    User      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}

/// ‚ößÔ∏è G√™neros dispon√≠veis no sistema
/// Suporte a diversidade e inclus√£o
model Gender {
    /// Identificador √∫nico do g√™nero
    id        String   @id @default(uuid())
    /// Descri√ß√£o do g√™nero (Masculino, Feminino, N√£o-bin√°rio, etc.)
    gender    String   @unique
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
    /// Usu√°rios com este g√™nero
    user      User[]
}

/// üíº Profiss√µes catalogadas no sistema
/// Base para an√°lises financeiras por categoria profissional
model Profession {
    /// Identificador √∫nico da profiss√£o
    id         String   @id @default(uuid())
    /// Nome da profiss√£o
    profession String   @unique
    /// Data de cria√ß√£o
    createdAt  DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt  DateTime @updatedAt
    /// Usu√°rios com esta profiss√£o
    user       User[]
}

/// üë®‚Äçüíº Tabelas CBO (Classifica√ß√£o Brasileira de Ocupa√ß√µes)
/// Dados oficiais do Minist√©rio do Trabalho para categoriza√ß√£o profissional

/// Fam√≠lias ocupacionais CBO
model CBO_Familia {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO da fam√≠lia
    codigo    String   @unique
    /// T√≠tulo da fam√≠lia ocupacional
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// Grandes grupos ocupacionais CBO
model CBO_Grande_Grupo {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO do grande grupo
    codigo    String   @unique
    /// T√≠tulo do grande grupo
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// Ocupa√ß√µes espec√≠ficas CBO
model CBO_Ocupacao {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO da ocupa√ß√£o
    codigo    String   @unique
    /// T√≠tulo da ocupa√ß√£o
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// Perfis ocupacionais detalhados CBO
model CBO_Perfil_Ocupacional {
    /// Identificador √∫nico
    id                     String   @id @default(uuid())
    /// C√≥digo do grande grupo
    cod_grande_grupo       String
    /// C√≥digo do subgrupo principal
    cod_subgrupo_principal String
    /// C√≥digo do subgrupo
    cod_subgrupo           String
    /// C√≥digo da fam√≠lia
    cod_familia            String
    /// C√≥digo da ocupa√ß√£o
    cod_ocupacao           String
    /// Sigla da grande √°rea
    sgl_grande_area        String
    /// Nome da grande √°rea
    nome_grande_area       String
    /// T√≠tulo do perfil ocupacional
    titulo                 String
    /// Data de cria√ß√£o
    createdAt              DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt              DateTime @updatedAt
}

/// Sin√¥nimos de ocupa√ß√µes CBO
model CBO_Sinonimo {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO
    codigo    String   @unique
    /// T√≠tulo do sin√¥nimo
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// Subgrupos principais CBO
model CBO_Subgrupo_Principal {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO
    codigo    String   @unique
    /// T√≠tulo do subgrupo principal
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// Subgrupos CBO
model CBO_Subgrupo {
    /// Identificador √∫nico
    id        String   @id @default(uuid())
    /// C√≥digo oficial CBO
    codigo    String   @unique
    /// T√≠tulo do subgrupo
    titulo    String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// ‚úçÔ∏è Autores de conte√∫do (sistema futuro)
/// Para expans√£o do sistema de conte√∫do educacional
model Author {
    /// Identificador √∫nico do autor
    id        String   @id @default(uuid())
    /// Nome do autor
    name      String
    /// Data de cria√ß√£o
    createdAt DateTime @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt DateTime @updatedAt
}

/// üè∑Ô∏è Enums para tipagem forte

/// Pap√©is de usu√°rio no sistema
enum Role {
    /// Usu√°rio comum com permiss√µes b√°sicas
    USER
    /// Administrador com permiss√µes completas
    ADMIN
}

/// Status de contas no sistema
enum AccountStatus {
    /// Conta ativa e operacional
    ACTIVE
    /// Conta inativa (temporariamente)
    INACTIVE
}

/// üí∞ Contas financeiras dos usu√°rios
/// Core do sistema de gest√£o financeira
model Account {
    /// Identificador √∫nico da conta
    id           String        @id @default(uuid())
    /// Nome personalizado da conta (ex: "Conta Corrente Banco X")
    name         String        @db.VarChar(100)
    /// Tipo da conta (CHECKING, SAVINGS, CREDIT_CARD, INVESTMENT)
    type         String
    /// Saldo atual da conta (pode ser negativo para cart√µes)
    balance      Float         @default(0)
    /// Propriet√°rio da conta (relacionamento N:1)
    user         User          @relation(fields: [userId], references: [id])
    userId       String
    /// Status da conta (ACTIVE, INACTIVE)
    status       AccountStatus @default(ACTIVE)
    /// Data de cria√ß√£o
    createdAt    DateTime      @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt    DateTime      @updatedAt
    /// Transa√ß√µes origin√°rias desta conta
    transactions Transaction[] @relation("OriginAccount")
    /// Transa√ß√µes destinadas a esta conta (transfer√™ncias)
    incomingTransactions Transaction[] @relation("DestinationAccount")
}

/// üí∏ Transa√ß√µes financeiras
/// Movimenta√ß√µes de entrada, sa√≠da e transfer√™ncias entre contas
model Transaction {
    /// Identificador √∫nico da transa√ß√£o
    id                    String            @id @default(uuid())
    /// Descri√ß√£o da transa√ß√£o
    description           String            @db.VarChar(255)
    /// Valor da transa√ß√£o (sempre positivo)
    amount                Float
    /// Tipo da transa√ß√£o (INCOME, EXPENSE, TRANSFER)
    type                  TransactionType
    /// Status da transa√ß√£o (PENDING, COMPLETED, CANCELLED, FAILED)
    status                TransactionStatus @default(PENDING)
    /// Conta de origem (relacionamento N:1)
    account               Account           @relation("OriginAccount", fields: [accountId], references: [id])
    accountId             String
    /// Categoria da transa√ß√£o (relacionamento N:1)
    category              Category          @relation(fields: [categoryId], references: [id])
    categoryId            String
    /// Conta de destino para transfer√™ncias (relacionamento N:1, opcional)
    destinationAccount    Account?          @relation("DestinationAccount", fields: [destinationAccountId], references: [id])
    destinationAccountId  String?
    /// Data da transa√ß√£o (pode ser diferente da cria√ß√£o)
    date                  DateTime          @default(now())
    /// Data de cria√ß√£o do registro
    createdAt             DateTime          @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt             DateTime          @updatedAt
}

/// üè∑Ô∏è Categorias de transa√ß√µes
/// Classifica√ß√£o para organiza√ß√£o e relat√≥rios financeiros
model Category {
    /// Identificador √∫nico da categoria
    id           String        @id @default(uuid())
    /// Nome da categoria (ex: "Alimenta√ß√£o", "Transporte")
    name         String        @db.VarChar(50)
    /// Descri√ß√£o opcional da categoria
    description  String?       @db.VarChar(255)
    /// Cor para identifica√ß√£o visual (hex color)
    color        String?       @db.VarChar(7)
    /// √çcone da categoria (nome do √≠cone ou emoji)
    icon         String?       @db.VarChar(50)
    /// Tipo padr√£o para esta categoria (sugest√£o)
    defaultType  TransactionType?
    /// Status da categoria (ACTIVE, INACTIVE)
    status       AccountStatus @default(ACTIVE)
    /// Data de cria√ß√£o
    createdAt    DateTime      @default(now())
    /// Data da √∫ltima atualiza√ß√£o
    updatedAt    DateTime      @updatedAt
    /// Transa√ß√µes desta categoria
    transactions Transaction[]
}

/// üìä Tipos de transa√ß√£o
enum TransactionType {
    /// Receita/Entrada de dinheiro
    INCOME
    /// Despesa/Sa√≠da de dinheiro
    EXPENSE
    /// Transfer√™ncia entre contas
    TRANSFER
}

/// üîÑ Status de transa√ß√£o
enum TransactionStatus {
    /// Transa√ß√£o pendente de processamento
    PENDING
    /// Transa√ß√£o conclu√≠da com sucesso
    COMPLETED
    /// Transa√ß√£o cancelada pelo usu√°rio
    CANCELLED
    /// Transa√ß√£o falhou durante processamento
    FAILED
}
